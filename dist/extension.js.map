{"version":3,"file":"extension.js","mappings":"23BAEA,oBAAyBA,GACvB,MAAMC,EAAaC,EAAOC,SAASC,gBAAgB,kBAAmB,KACpE,MAAMC,EAAQH,EAAOI,OAAOC,mBAC1B,YACA,aACAL,EAAOM,WAAWC,IAClB,CACEC,eAAe,EACfC,yBAAyB,IAI7BN,EAAMO,QAAQC,KAsCA,umPApCdR,EAAMO,QAAQE,oBAAoBC,MAAOC,IACvC,GAAwB,gBAApBA,EAAQC,QACV,IACE,MAAMC,QAAiBC,MAAMH,EAAQI,IAAK,CACxCC,OAAQL,EAAQK,OAChBC,QAASN,EAAQM,QACjBC,KACqB,QAAnBP,EAAQK,QAAuC,SAAnBL,EAAQK,OAChCL,EAAQO,UACRC,IAGFC,QAAaP,EAASO,OAC5B,IAAIC,EAAYD,EAChB,IACEC,EAAYC,KAAKC,UAAUD,KAAKE,MAAMJ,GAAO,KAAM,EACrD,CAAE,MAAOK,GAAI,CAEbzB,EAAMO,QAAQmB,YAAY,CACxBd,QAAS,eACTC,SAAUQ,GAEd,CAAE,MAAOM,GACP3B,EAAMO,QAAQmB,YAAY,CACxBd,QAAS,eACTC,SAAU,UAAUc,EAAIhB,WAE5B,MAKNhB,EAAQiC,cAAcC,KAAKjC,EAC7B,EAmQA,wBAA8B,EApT9B,iB,UCAAkC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBjB,IAAjBkB,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://api-tester-vscode/./src/extension.ts","webpack://api-tester-vscode/external commonjs \"vscode\"","webpack://api-tester-vscode/webpack/bootstrap","webpack://api-tester-vscode/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  const disposable = vscode.commands.registerCommand(\"api-tester.open\", () => {\n    const panel = vscode.window.createWebviewPanel(\n      \"apiTester\",\n      \"API Tester\",\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n\n    panel.webview.html = getWebviewContent();\n\n    panel.webview.onDidReceiveMessage(async (message) => {\n      if (message.command === \"sendRequest\") {\n        try {\n          const response = await fetch(message.url, {\n            method: message.method,\n            headers: message.headers,\n            body:\n              message.method !== \"GET\" && message.method !== \"HEAD\"\n                ? message.body\n                : undefined,\n          });\n\n          const text = await response.text();\n          let formatted = text;\n          try {\n            formatted = JSON.stringify(JSON.parse(text), null, 2);\n          } catch (e) {}\n\n          panel.webview.postMessage({\n            command: \"showResponse\",\n            response: formatted,\n          });\n        } catch (err: any) {\n          panel.webview.postMessage({\n            command: \"showResponse\",\n            response: `Error: ${err.message}`,\n          });\n        }\n      }\n    });\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nfunction getWebviewContent(): string {\n  return /*html*/ `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <style>\n        body {\n          font-family: sans-serif;\n          margin: 0;\n          background: #1e1e1e;\n          color: #ddd;\n          display: flex;\n          flex-direction: column;\n          height: 100vh;\n        }\n        header {\n          background: #202123;\n          padding: 10px;\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        select, input, textarea, button {\n          border-radius: 4px;\n          border: none;\n          padding: 6px;\n          font-size: 14px;\n        }\n        select, input {\n          background: #2d2f31;\n          color: #eee;\n        }\n        textarea {\n          background: #2d2f31;\n          color: #eee;\n          resize: vertical;\n        }\n        button {\n          background: #f26b38;\n          color: white;\n          cursor: pointer;\n        }\n        button:hover {\n          opacity: 0.9;\n        }\n        .tabs {\n          display: flex;\n          background: #2a2c2e;\n          padding: 5px;\n          overflow-x: auto;\n        }\n        .tab {\n          padding: 6px 12px;\n          margin-right: 6px;\n          background: #3a3d3f;\n          color: white;\n          border-radius: 4px 4px 0 0;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          gap: 6px;\n        }\n        .tab.active {\n          background: #f26b38;\n        }\n        .tab button {\n          background: transparent;\n          color: white;\n          border: none;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        .content {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          background: #1e1e1e;\n          overflow: auto;\n        }\n        .response {\n          margin-top: 10px;\n          background: #252728;\n          padding: 10px;\n          border-radius: 4px;\n          white-space: pre-wrap;\n          color: #a9dc76;\n          font-family: monospace;\n        }\n        .sub-tabs {\n          display: flex;\n          gap: 10px;\n          margin: 10px 0;\n        }\n        .sub-tab {\n          padding: 6px 10px;\n          cursor: pointer;\n          border-radius: 4px;\n          background: #333;\n          color: #aaa;\n        }\n        .sub-tab.active {\n          background: #f26b38;\n          color: white;\n        }\n        .hidden {\n          display: none;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"tabs\" id=\"tabs\"></div>\n      <header>\n        <select id=\"method\">\n          <option>GET</option>\n          <option>POST</option>\n          <option>PUT</option>\n          <option>PATCH</option>\n          <option>DELETE</option>\n        </select>\n        <input type=\"text\" id=\"url\" placeholder=\"Enter request URL...\" style=\"flex:1\"/>\n        <button id=\"send\">Send</button>\n        <button id=\"newTab\">+ Tab</button>\n      </header>\n      <div class=\"content\">\n        <div class=\"sub-tabs\">\n          <div class=\"sub-tab active\" data-tab=\"body\">Body</div>\n          <div class=\"sub-tab\" data-tab=\"headers\">Headers</div>\n        </div>\n        <textarea id=\"body\" rows=\"8\" placeholder=\"Request Body (JSON)\"></textarea>\n        <textarea id=\"headers\" class=\"hidden\" rows=\"8\" placeholder='{ \"Content-Type\": \"application/json\" }'></textarea>\n        <div class=\"response\" id=\"response\">Response will appear here...</div>\n      </div>\n      <script>\n        const vscode = acquireVsCodeApi();\n\n        let tabs = [];\n        let activeTab = null;\n\n        function addTab() {\n          const id = Date.now().toString();\n          const state = { id, url: \"\", method: \"GET\", body: \"\", headers: \"\", response: \"\" };\n          tabs.push(state);\n          setActiveTab(id);\n          renderTabs();\n          loadState();\n        }\n\n        function removeTab(id) {\n          tabs = tabs.filter(t => t.id !== id);\n          if (activeTab === id && tabs.length > 0) {\n            setActiveTab(tabs[0].id);\n          } else if (tabs.length === 0) {\n            addTab();\n          }\n          renderTabs();\n          loadState();\n        }\n\n        function setActiveTab(id) {\n          activeTab = id;\n        }\n\n        function renderTabs() {\n          const tabsDiv = document.getElementById(\"tabs\");\n          tabsDiv.innerHTML = \"\";\n          tabs.forEach(tab => {\n            const el = document.createElement(\"div\");\n            el.className = \"tab\" + (tab.id === activeTab ? \" active\" : \"\");\n            el.innerHTML = tab.url || \"New Request\";\n            const closeBtn = document.createElement(\"button\");\n            closeBtn.textContent = \"x\";\n            closeBtn.onclick = (e) => {\n              e.stopPropagation();\n              removeTab(tab.id);\n            };\n            el.appendChild(closeBtn);\n            el.onclick = () => {\n              saveState();\n              setActiveTab(tab.id);\n              renderTabs();\n              loadState();\n            };\n            tabsDiv.appendChild(el);\n          });\n        }\n\n        function saveState() {\n          const tab = tabs.find(t => t.id === activeTab);\n          if (tab) {\n            tab.url = document.getElementById(\"url\").value;\n            tab.method = document.getElementById(\"method\").value;\n            tab.body = document.getElementById(\"body\").value;\n            tab.headers = document.getElementById(\"headers\").value;\n            tab.response = document.getElementById(\"response\").innerText;\n          }\n        }\n\n        function loadState() {\n          const tab = tabs.find(t => t.id === activeTab);\n          if (tab) {\n            document.getElementById(\"url\").value = tab.url;\n            document.getElementById(\"method\").value = tab.method;\n            document.getElementById(\"body\").value = tab.body;\n            document.getElementById(\"headers\").value = tab.headers;\n            document.getElementById(\"response\").innerText = tab.response || \"Response will appear here...\";\n          }\n        }\n\n        document.getElementById(\"send\").onclick = () => {\n          saveState();\n          const tab = tabs.find(t => t.id === activeTab);\n          vscode.postMessage({\n            command: \"sendRequest\",\n            url: tab.url,\n            method: tab.method,\n            headers: tab.headers ? JSON.parse(tab.headers) : {},\n            body: tab.body,\n          });\n        };\n\n        document.getElementById(\"newTab\").onclick = () => {\n          saveState();\n          addTab();\n        };\n\n        window.addEventListener(\"message\", event => {\n          const message = event.data;\n          if (message.command === \"showResponse\") {\n            const tab = tabs.find(t => t.id === activeTab);\n            if (tab) {\n              tab.response = message.response;\n              document.getElementById(\"response\").innerText = message.response;\n            }\n          }\n        });\n\n        document.querySelectorAll(\".sub-tab\").forEach(el => {\n          el.onclick = () => {\n            document.querySelectorAll(\".sub-tab\").forEach(st => st.classList.remove(\"active\"));\n            el.classList.add(\"active\");\n            const target = el.dataset.tab;\n            document.getElementById(\"body\").classList.add(\"hidden\");\n            document.getElementById(\"headers\").classList.add(\"hidden\");\n            document.getElementById(target).classList.remove(\"hidden\");\n          };\n        });\n\n        // Start with one tab\n        addTab();\n      </script>\n    </body>\n    </html>\n  `;\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","panel","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","webview","html","onDidReceiveMessage","async","message","command","response","fetch","url","method","headers","body","undefined","text","formatted","JSON","stringify","parse","e","postMessage","err","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}